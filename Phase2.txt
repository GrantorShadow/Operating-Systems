#include<iostream>
#include<stdio.h>
#include<string.h>
#include<fstream>
#include<stdlib.h>
#include<time.h>
#include<cctype>
using namespace std;

void load_code();
int addrmap();
void MOS();
void START_EXE();
void READ_M();
void WRITE_M();
void EXE_PROG();
void terminate_h();
char MEM[300][4]{0}, IR[4],BUFF[40]{'\0'};
int alt[30]{0};
int ti;
int PTR{NULL};
struct P{
    int jobid,ttl,tll;
}PCBV;

char R[4]{'\0'};
bool C;
int flagt=0,b=0,ttc=0,llc=0;
string am;
int SI;
int pi;
int ic;
int n;
ifstream infile("prog1.txt");
ofstream outfile("progoutput.txt");

void allocate_ptable()
{
    int i;
    for(i=0;i<10;i++)
    {
        MEM[PTR+i][0]='*';
    }
}
int randm()
{
    int n=rand()%30;
    while(alt[n]==1)
    {
        n=rand()%30;
    }
    alt[n]=1;
    return n;

}
void allocate_pcb()
{
    PCBV.jobid=(am[3]-48)*1000+(am[4]-48)*100+(am[5]-48)*10+(am[6]-48)*1;
    PCBV.ttl=(am[7]-48)*1000+(am[8]-48)*100+(am[9]-48)*10+(am[10]-48)*1;
    PCBV.tll=(am[11]-48)*1000+(am[12]-48)*100+(am[13]-48)*10+(am[14]-48)*1;
}


void terminate_h()
{
    outfile<<"\tIC: "<<ic<<"\t";
    outfile<<"IR: "<<IR<<"\t";
    outfile<<"TTL: "<<PCBV.ttl<<"\t";
    outfile<<"TLL: "<<PCBV.tll<<"\t";
    outfile<<"TTC: "<<ttc<<"\t";
    outfile<<"LLC: "<<llc<<"\t";
    outfile<<endl<<endl<<"--------------------------------------------\n";
}

void WRITE_M()
{
    int i,k=0,j;


   i=addrmap();
    for( j=0;j<40;j++)
    {
        BUFF[j]=MEM[i][k];
         if(k!=3)
            k++;
        else
        {
            k=0;
            i++;
        }
    }
    for(j=0;j<40;j++)
   {
       if(BUFF[j]=='\0')
       {
           break;
       }
       outfile<<BUFF[j];
   }


    for(j=0;j<40;j++)
    {
        BUFF[j]='\0';
    }
    outfile<<endl;


}

void READ_M()
{
    char ch;
    int i,k=0,j;
   while(infile)
   {
       infile.get(ch);
       if(ch=='\n')
       {
           break;
       }
       BUFF[b]=ch;
       b++;   //size of buffer will be b and it full upto index b-1
       //cout<<b<< ":"<<BUFF[b]<<" ";

   }

   i=addrmap();
    for( j=0;j<40;j++)
    {
        MEM[i][k]=BUFF[j];
         if(k!=3)
            k++;
        else
        {
            k=0;
            i++;
        }
    }
   for(j=0;j<40;j++)
   {
       BUFF[j]='\0';
   }
   b=0;//buffer idex initialize to 0
}
int page_fault()
{
    char s[2];
    int d1;
     strcpy(s,IR);
        s[2]='\0';
        if(!strcmp(s,"SR")||!strcmp(s,"GD"))
        {
            //cout<<n<<endl;
            d1=n/10;
            n=randm();
            MEM[PTR+d1][0]=n/10+48;
            MEM[PTR+d1][1]=n%10+48;
            ic--;
            pi=0;
        return 1;
        }
        else return 0;
}
void MOS()
{
    int k;
    if(SI!=0)
    {
        if(ti==0)
        {
            switch(SI)
            {
                case 1:
                READ_M();
                SI=0;
                cout<<"Read";
                break;
            case 2:
                WRITE_M();
                SI=0;
                cout<<"Write";
                break;
        case 3:
            terminate_h();
            SI=0;
            cout<<"Terminate normally";
            flagt=1;
            break;
        default:
            cout<<"ERROR_MOS";
        }


        }
        else if(ti==2)
        {
              switch(SI)
            {
                case 1:
                outfile<<"Time Limit exceeded";
                terminate_h();
                SI=0;
                cout<<"Error: Time Limit exceeded";

                flagt=1;
                break;
            case 2:
                WRITE_M();

                outfile<<"Write operation done and Time Limit exceeded ";
                terminate_h();
                SI=0;
                flagt=1;
                break;
            case 3:
                outfile<<"No error"<<endl;
            terminate_h();
            SI=0;

            flagt=1;
            break;
            default:
            cout<<"ERROR_MOS";
        }
        }
    }
        if(pi!=0)
        {
        if(ti==0)
        {
            switch(pi)
            {
                case 1:

                outfile<<"Operation code error";
                terminate_h();
                pi=0;
                flagt=1;
                break;
            case 2:

                outfile<<"Operand error";
                terminate_h();
                pi=0;
                flagt=1;
                break;
        case 3:


            cout<<"Page fault function called"<<endl;
            k=page_fault();
            if(k)
            {

               cout<<"Page fault error handled"<<endl;
            }
            else {
                outfile<<"Page fault error";
                terminate_h();
                flagt=1;
            }

            break;
        default:
            cout<<"ERROR_MOS";
        }


        }
        else if(ti==2)
        {
              switch(pi)
            {
                case 1:
                outfile<<"Time limit exceeded and opcode error";
                terminate_h();
                pi=0;
                cout<<"Time limit exceeded and opcode error";
                flagt=1;
                break;
            case 2:


               outfile<<"Time limit exceeded and operand error ";
               terminate_h();
                pi=0;
               cout<<"Time limit exceeded and opcode error";
               flagt=1;
                break;
            case 3:
            terminate_h();
            pi=0;
            outfile<<"Time limit exceeded";
            flagt=1;
            break;
            default:
            cout<<"ERROR_MOS";
        }
        }

    }

}
void START_EXE()
{
    ic=0;
    EXE_PROG();
}
int addrmap()
{
                int b;
                if(!isdigit(IR[3])||!isdigit(IR[2]))
                {
                   pi=2;
                    MOS();
                    return 1;
                }
                else
                {


               n=(IR[3]-48)+(IR[2]-48)*10;

              /* if(MEM[PTR+n/10][0]=='*')
            {
                pi=3;

            }*/
               b=(MEM[PTR+n/10][0]-48)*10+(MEM[PTR+n/10][1]-48) ;
               b=b*10;
              /* if((n<0 || n>99)||(b<0||b>299))
               {
                    pi=2;
                    MOS();

               }*/
               return b;
                }
}

void checkcnt()
{

    if(PCBV.ttl<ttc)
    {
        ti=2;
    }
    if(llc>PCBV.tll)
    {
        ti=2;
        flagt=1;
        outfile<<"Line limit exceeded";
        terminate_h();

    }

}

void EXE_PROG()
{

    int k,i,RA,d1,d2,r,b;
    char s[2];

    while(1)
    {
            if(flagt==1)
            return;
            ttc++;
            if(ic<=9)
        {
            d1=0;
            d2=ic;
        }
        else
        {
        d1=ic/10;
        d2=ic%10;
        }
        checkcnt();
        if(flagt==1)
            return;
        RA=(MEM[PTR+d1][0]-48)*10+(MEM[PTR+d1][1]-48);
        RA=RA*10;
        RA=RA+d2;

        for(i=0;i<4;i++)
        {
                IR[i]=MEM[RA][i];

        }
         n=(IR[3]-48)+(IR[2]-48)*10;
        ic++;
       // cout<<endl<<IR;
        cout<<endl;
        strcpy(s,IR);
        s[2]='\0';


        if(!strcmp(s,"CR"))
        {


               b=addrmap();
               if(flagt)
                    {
                        return;
                        }
              for(k=0;k<4;k++)
              {
                  C=1;
                  if(R[k]!=MEM[b][k])
                  {
                      C=0;
                      break;
                  }
              }




        }
        else if(!strcmp(s,"LR"))
        {
              b=addrmap();
              if(flagt)
                    {
                        return;
                        }
              for(k=0;k<4;k++)
              {
                  R[k]=MEM[b][k];
              }


        }
         else if(!strcmp(s,"BT"))
        {

            b=addrmap();
            if(flagt)
                    {
                        return;
                        }
             if(C==1)
             {
               ic=n;
             }


        }
       else if(!strcmp(s,"SR"))
        {


            if(MEM[PTR+n/10][0]=='*')
            {
                pi=3;

            }

            else{
                b=addrmap();
                    if(flagt)
                    {
                        return;
                    }
               for(k=0;k<4;k++)
              {
                  MEM[b][k]=R[k];
              }
            }

        }
        else if(!strcmp(s,"GD"))
        {
            if(MEM[PTR+n/10][0]=='*')
            {
                pi=3;

            }
            else{
                    b=addrmap();
                    if(flagt)
                    {
                        return;
                    }
                SI=1;
            }

        }
        else if(!strcmp(s,"PD"))
        {
            llc++;
            checkcnt();
            if(MEM[PTR+n/10][0]=='*')
            {
                pi=3;
            }
            else{
            b=addrmap();
            if(flagt)
                    {
                        return;
                        }

             SI=2;
            }
        }
        else if(!strcmp(s,"H"))
        {
            SI=3;
        }
        else
        {
            pi=1;
        }

        if(SI!=0 || pi!=0 || ti!=0)
        {
                 MOS();
        }




    }
}


void load_code()
{
    int count=0;
     int i=0,k=0,j=0,n1=0;
    char ch;
     n1=randm();
    MEM[PTR][0]=n1/10+48;
    MEM[PTR][1]=n1%10+48;
    i=n1*10;
    while(infile)
    {

        if(count>9)
        {
            j++;
            n1=randm();
            MEM[PTR+j][0]=n1/10+48;
            MEM[PTR+j][1]=n1%10+48;
            count=0;
            i=n1*10;
        }

        infile.get(ch);
        if(ch=='H')
        {
            MEM[i][k]='H';
            MEM[i][k+1]='\0';
            MEM[i][k+2]='\0';
            MEM[i][k+3]='\0';
            k=k+3;
            return ;
        }
        MEM[i][k]=ch;
        if(k!=3)
            k++;
        else
        {
            k=0;
            i++;
            count++;
        }

    }
}


int main()
{
    int i,k;
    char ch;
    srand(time(0));
        if(!infile)
        {
            cout<<"\n Error in file opening";
            return 1;
        }
       // cout<<ic[0]<<ic[1];
        while(infile)
        {
            infile.get(ch);
            if(ch!='$')
            {
               // break;
               cout<<endl;
            }
            else
            {


            getline(infile,am);
            if(am.find("AMJ")!=string::npos)
            {
                cout<<am;
               // cout<<"okkk";
                allocate_pcb();
                PTR=rand()%30;
                alt[PTR]=1;
                PTR=PTR*10;
                cout<<"\nThe PTR is located at: MEM["<<PTR<<"]"<<endl;
                allocate_ptable();

                load_code();
                infile.get(ch);
            }
            else if(am.find("DTA")!=string::npos)
            {
               // cout<<"\nEntering the data card"<<endl;
                START_EXE();//slavemode

            }
            else if(am.find("END")!=string::npos)
            {
                //outfile<<endl<<endl<<"------------------------------------------------------------------------";

                //infile.get(ch);
                for(i=0;i<300;i++)
                {
                    for(k=0;k<4;k++)
                    {
                        MEM[i][k]='\0';
                    }
                    cout<<"\n";
                }
            flagt=0;
            ic=0;
            ti=0;
            pi=0;
            SI=0;
            ttc=0;
            llc=0;
            for(k=0;k<30;k++)
                    {

                        alt[k]=0;
                    }
            }

        }
        }
        cout<<endl<<endl;


        cout<<"\n Done with phase 2 ";
        return(0);
}
